import React, { useState } from 'react';

export default function App() {
  const [textValue, setTextValue] = useState('');
  const [selectedValue, setSelectedValue] = useState('1');
  const [commaValue, setCommaValue] = useState(',,');
  const [savedData, setSavedData] = useState<{ text: string; char: string; commas: string } | null>(null);

  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (/^\d*$/.test(value)) {
      setTextValue(value);
    }
  };

  const handleSelectChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedValue(e.target.value);
  };

  const handleCommaChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setCommaValue(e.target.value);
  };

  const handleSave = () => {
    setSavedData({
      text: textValue,
      char: selectedValue,
      commas: commaValue,
    });
  };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100">
      <h1 className="text-3xl font-bold mb-8 text-gray-800">Input Form</h1>

      <div className="bg-white shadow-md rounded-lg p-8 w-full max-w-md">
        <div className="mb-4">
          <label htmlFor="textInput" className="block text-gray-700 text-sm font-bold mb-2">
            Text (1-2022):
          </label>
          <input
            type="text"
            id="textInput"
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            placeholder="Enter a number between 1 and 2022"
            value={textValue}
            onChange={handleTextChange}
            maxLength={4}
          />
        </div>

        <div className="mb-4">
          <label htmlFor="selectChar" className="block text-gray-700 text-sm font-bold mb-2">
            Select Character:
          </label>
          <select
            id="selectChar"
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={selectedValue}
            onChange={handleSelectChange}
          >
            {Array.from({ length: 2022 }, (_, i) => i + 1).map((num) => (
              <option key={num} value={String(num)}>
                {String(num)}
              </option>
            ))}
          </select>
        </div>

        <div className="mb-4">
          <label htmlFor="selectCommas" className="block text-gray-700 text-sm font-bold mb-2">
            Select Commas:
          </label>
          <select
            id="selectCommas"
            className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            value={commaValue}
            onChange={handleCommaChange}
          >
            <option value=",,">,,</option>
          </select>
        </div>

        <div className="flex items-center justify-between">
          <button
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            type="button"
            onClick={handleSave}
          >
            Save
          </button>
          <button
            className="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            type="button"
            onClick={() => alert(JSON.stringify({textValue, selectedValue, commaValue}))}
          >
            Accept
          </button>
        </div>
      </div>

      {savedData && (
        <div className="mt-8 p-4 bg-green-200 rounded-md">
          <h2 className="text-xl font-semibold text-gray-800">Saved Data:</h2>
          <p>
            <strong>Text:</strong> {savedData.text}
          </p>
          <p>
            <strong>Character:</strong> {savedData.char}
          </p>
          <p>
            <strong>Commas:</strong> {savedData.commas}
          </p>
        </div>
      )}
    </div>
  );
}
